name: Package Release

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering of the workflow

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
#  build:
#    runs-on: ubuntu-latest
#
#    steps:
#      # Step 1: Checkout the repository
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#
#      # Step 2: Set up Python
#      - name: Set up Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: '3.x'
#
#      # Step 2.5: Set up tkinter
#      - name: Install Tkinter dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y python3-tk
#
#      # Step 3: Install Poetry
#      - name: Install Poetry
#        run: |
#          curl -sSL https://install.python-poetry.org | python3 -
#          # Add Poetry's bin directory to the PATH for subsequent steps
#          echo "${HOME}/.local/bin" >> $GITHUB_PATH
#          poetry --version
#
#      # Step 4: Install Project Dependencies using Poetry
#      - name: Install Dependencies
#        run: |
#          poetry lock
#          poetry install
#
#      # Step 5: Build the executable using PyInstaller via Poetry
#      - name: Build Executable
#        run: |
#          # This runs PyInstaller within the Poetry-managed environment.
#          poetry run pyinstaller src/app.spec
#
#      # Step 6: Package the .exe and additional file into a ZIP archive
#      - name: Create Release ZIP
#        run: |
#          mkdir release
#          # Adjust the path if your .exe is located elsewhere.
#          cp dist/collections_app/collections_app release/
#          # Copy an additional file from the repository (e.g., README.md).
#          cp src/settings.EXAMPLE.conf release/
#          cp ExampleBulkUpload.xlsx release/
#          # Create a ZIP archive containing the contents of the release folder.
#          cd release && zip -r ../release.zip . && cd ..
#
#      # Step 7: Upload the ZIP file as an artifact
#      - name: Upload Release Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: release-zip
#          path: release.zip

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Download the built ZIP artifact from the build job.
      - name: Download Release Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-zip
          path: .

      # Checkout the repository so we can fetch the tags.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Fetch all tags (needed for version determination).
      - name: Fetch Tags
        run: git fetch --tags

      # Determine the new version by bumping the minor version.
      - name: Determine New Version
        id: new_version
        run: |
          # Get the latest tag (if none exists, default to v1.0.0)
          latestTag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "Latest tag: $latestTag"
          # Remove the 'v' prefix if present.
          version=${latestTag#v}
          IFS='.' read -r major minor patch <<< "$version"
          # Increment the minor version and reset the patch number.
          newMinor=$((minor + 1))
          newVersion="v${major}.${newMinor}.0"
          echo "New version: $newVersion"
          # Save the new version for later steps.
          echo "new_version=$newVersion" >> $GITHUB_OUTPUT

      # Create a draft GitHub Release with the new version.
      - name: Create Draft GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.new_version.outputs.new_version }}
          name: Release ${{ steps.new_version.outputs.new_version }}
          body: Automated release based on build workflow.
          draft: true
          files:
            release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
